// Generated by gencpp from file caato2_stm/change_robot_stateRequest.msg
// DO NOT EDIT!


#ifndef CAATO2_STM_MESSAGE_CHANGE_ROBOT_STATEREQUEST_H
#define CAATO2_STM_MESSAGE_CHANGE_ROBOT_STATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace caato2_stm
{
template <class ContainerAllocator>
struct change_robot_stateRequest_
{
  typedef change_robot_stateRequest_<ContainerAllocator> Type;

  change_robot_stateRequest_()
    : request_state_code(0)  {
    }
  change_robot_stateRequest_(const ContainerAllocator& _alloc)
    : request_state_code(0)  {
  (void)_alloc;
    }



   typedef uint8_t _request_state_code_type;
  _request_state_code_type request_state_code;





  typedef boost::shared_ptr< ::caato2_stm::change_robot_stateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::caato2_stm::change_robot_stateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct change_robot_stateRequest_

typedef ::caato2_stm::change_robot_stateRequest_<std::allocator<void> > change_robot_stateRequest;

typedef boost::shared_ptr< ::caato2_stm::change_robot_stateRequest > change_robot_stateRequestPtr;
typedef boost::shared_ptr< ::caato2_stm::change_robot_stateRequest const> change_robot_stateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::caato2_stm::change_robot_stateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::caato2_stm::change_robot_stateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::caato2_stm::change_robot_stateRequest_<ContainerAllocator1> & lhs, const ::caato2_stm::change_robot_stateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.request_state_code == rhs.request_state_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::caato2_stm::change_robot_stateRequest_<ContainerAllocator1> & lhs, const ::caato2_stm::change_robot_stateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace caato2_stm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::caato2_stm::change_robot_stateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::caato2_stm::change_robot_stateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::caato2_stm::change_robot_stateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::caato2_stm::change_robot_stateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::caato2_stm::change_robot_stateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::caato2_stm::change_robot_stateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::caato2_stm::change_robot_stateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e60b1088c7a955c19b8766b206ebe871";
  }

  static const char* value(const ::caato2_stm::change_robot_stateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe60b1088c7a955c1ULL;
  static const uint64_t static_value2 = 0x9b8766b206ebe871ULL;
};

template<class ContainerAllocator>
struct DataType< ::caato2_stm::change_robot_stateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "caato2_stm/change_robot_stateRequest";
  }

  static const char* value(const ::caato2_stm::change_robot_stateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::caato2_stm::change_robot_stateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 request_state_code\n"
;
  }

  static const char* value(const ::caato2_stm::change_robot_stateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::caato2_stm::change_robot_stateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.request_state_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct change_robot_stateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::caato2_stm::change_robot_stateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::caato2_stm::change_robot_stateRequest_<ContainerAllocator>& v)
  {
    s << indent << "request_state_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.request_state_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAATO2_STM_MESSAGE_CHANGE_ROBOT_STATEREQUEST_H
