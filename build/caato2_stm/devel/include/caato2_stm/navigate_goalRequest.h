// Generated by gencpp from file caato2_stm/navigate_goalRequest.msg
// DO NOT EDIT!


#ifndef CAATO2_STM_MESSAGE_NAVIGATE_GOALREQUEST_H
#define CAATO2_STM_MESSAGE_NAVIGATE_GOALREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace caato2_stm
{
template <class ContainerAllocator>
struct navigate_goalRequest_
{
  typedef navigate_goalRequest_<ContainerAllocator> Type;

  navigate_goalRequest_()
    : nav_goal()  {
    }
  navigate_goalRequest_(const ContainerAllocator& _alloc)
    : nav_goal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _nav_goal_type;
  _nav_goal_type nav_goal;





  typedef boost::shared_ptr< ::caato2_stm::navigate_goalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::caato2_stm::navigate_goalRequest_<ContainerAllocator> const> ConstPtr;

}; // struct navigate_goalRequest_

typedef ::caato2_stm::navigate_goalRequest_<std::allocator<void> > navigate_goalRequest;

typedef boost::shared_ptr< ::caato2_stm::navigate_goalRequest > navigate_goalRequestPtr;
typedef boost::shared_ptr< ::caato2_stm::navigate_goalRequest const> navigate_goalRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::caato2_stm::navigate_goalRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::caato2_stm::navigate_goalRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::caato2_stm::navigate_goalRequest_<ContainerAllocator1> & lhs, const ::caato2_stm::navigate_goalRequest_<ContainerAllocator2> & rhs)
{
  return lhs.nav_goal == rhs.nav_goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::caato2_stm::navigate_goalRequest_<ContainerAllocator1> & lhs, const ::caato2_stm::navigate_goalRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace caato2_stm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::caato2_stm::navigate_goalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::caato2_stm::navigate_goalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::caato2_stm::navigate_goalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::caato2_stm::navigate_goalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::caato2_stm::navigate_goalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::caato2_stm::navigate_goalRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::caato2_stm::navigate_goalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0052dc94233347db986e0606d955b1cd";
  }

  static const char* value(const ::caato2_stm::navigate_goalRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0052dc94233347dbULL;
  static const uint64_t static_value2 = 0x986e0606d955b1cdULL;
};

template<class ContainerAllocator>
struct DataType< ::caato2_stm::navigate_goalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "caato2_stm/navigate_goalRequest";
  }

  static const char* value(const ::caato2_stm::navigate_goalRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::caato2_stm::navigate_goalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose nav_goal\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::caato2_stm::navigate_goalRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::caato2_stm::navigate_goalRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nav_goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct navigate_goalRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::caato2_stm::navigate_goalRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::caato2_stm::navigate_goalRequest_<ContainerAllocator>& v)
  {
    s << indent << "nav_goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.nav_goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAATO2_STM_MESSAGE_NAVIGATE_GOALREQUEST_H
